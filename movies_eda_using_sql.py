# -*- coding: utf-8 -*-
"""Movies EDA using SQL.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1veqzjUroQhNkBszTjyig2tvfiZXPJJ48

# Let's Explore the TMDB Database using SQL

![SQL Architectures](https://raw.githubusercontent.com/Explore-AI/Public-Data/master/image/TMDB_ERD.JPG)

We need to load our SQL magic commands (we only need to do this once per notebook):
"""

# Commented out IPython magic to ensure Python compatibility.
# %load_ext sql

# Commented out IPython magic to ensure Python compatibility.
# %sql sqlite:///TMDB.db

"""## Connect to the TMBD database that is saved in the same location with the Jupyter notebook

"""

# Commented out IPython magic to ensure Python compatibility.
# %%sql
# SELECT * FROM sqlite_master WHERE type='table';

"""## Find the primary key for the table “movies”

This will help us in fetching and organising data within this database

# Let us find the number of foreign keys in the “languagemap” table

### Set up a view of all movies that did not get released
"""

# Commented out IPython magic to ensure Python compatibility.
# %%sql
# CREATE VIEW Not_Released AS SELECT * FROM movies WHERE release_status <> 'Released';

"""###  Lets take a look at our Not Released View

Select only the title, release date, and release status columns from the view.

"""

# Commented out IPython magic to ensure Python compatibility.
# %%sql
# Select title, release_date, release_status From Not_Released;

"""### Number of Movies no longer using their original titles


"""

# Commented out IPython magic to ensure Python compatibility.
# %%sql
# SELECT COUNT (*) FROM movies WHERE title!=original_title;

# Commented out IPython magic to ensure Python compatibility.
# %%sql
# SELECT title, original_title FROM movies WHERE title!=original_title LIMIT 10;

"""### Most popular movie made after 01/01/2000 with a budget of  > $100 000 000

Let's use the popularity field in the Movies table. Larger numbers are more popular.

"""

# Commented out IPython magic to ensure Python compatibility.
# %%sql
# SELECT popularity,title  FROM movies WHERE release_date>2006-01-01 AND budget>100000000 ORDER BY popularity DESC LIMIT 5;

"""### Number of movies that do not have English as their original language


"""

# Commented out IPython magic to ensure Python compatibility.
# %%sql
# SELECT COUNT(*) FROM movies WHERE original_language <> 'en';

# Commented out IPython magic to ensure Python compatibility.
# %%sql
# SELECT title, original_language FROM movies WHERE original_language <> 'en' LIMIT 10;

"""### Movies in the database were produced by Pixar Animation Studios


"""

# Commented out IPython magic to ensure Python compatibility.
# %%sql
# SELECT COUNT(*) as pixar_movie_count
# FROM productioncompanies AS pc
# JOIN productioncompanymap AS pcm ON pc.production_company_id = pcm.production_company_id
# JOIN movies AS m ON pcm.movie_id = m.movie_id
# WHERE pc.production_company_name = 'Pixar Animation Studios';

# Commented out IPython magic to ensure Python compatibility.
# %%sql
# SELECT production_company_name, title
# FROM productioncompanies AS pc
# JOIN productioncompanymap AS pcm ON pc.production_company_id = pcm.production_company_id
# JOIN movies AS m ON pcm.movie_id = m.movie_id
# WHERE pc.production_company_name = 'Pixar Animation Studios'
# LIMIT 10;

"""### Movies in the database that are both a Romance and a Comedy

"""

# Commented out IPython magic to ensure Python compatibility.
# %%sql
# SELECT COUNT(DISTINCT m.movie_id) as genre_count
# FROM movies AS m
# JOIN genremap AS gm1 ON m.movie_id = gm1.movie_id
# JOIN genres AS g1 ON gm1.genre_id = g1.genre_id
# JOIN genremap AS gm2 ON m.movie_id = gm2.movie_id
# JOIN genres AS g2 ON gm2.genre_id = g2.genre_id
# WHERE g1.genre_name = 'Comedy' AND g2.genre_name = 'Romance';

# Commented out IPython magic to ensure Python compatibility.
# %%sql
# 
# SELECT DISTINCT m.movie_id, title, g2.genre_name,g1.genre_name
# FROM movies AS m
# JOIN genremap AS gm1 ON m.movie_id = gm1.movie_id
# JOIN genres AS g1 ON gm1.genre_id = g1.genre_id
# JOIN genremap AS gm2 ON m.movie_id = gm2.movie_id
# JOIN genres AS g2 ON gm2.genre_id = g2.genre_id
# WHERE g1.genre_name = 'Comedy' AND g2.genre_name = 'Romance'
# LIMIT 10;

"""### Most popular action movie that has some German in it?

We can use: Under the Language name, the German word for German is Deutsch



            The iso code for German in iso_639_1 is de
"""

# Commented out IPython magic to ensure Python compatibility.
# %%sql
# SELECT MAX(popularity), title FROM movies as m
# JOIN languageMap AS lm ON m.movie_id=lm.movie_id
# WHERE iso_639_1='de';
#

"""### Movies that Tom Cruise portrayed the character Ethan Hunt


"""

# Commented out IPython magic to ensure Python compatibility.
# %%sql
# SELECT COUNT(*) FROM movies AS m
# JOIN Casts AS c ON m.movie_id=c.movie_id
# JOIN Actors AS a ON c.actor_id=a.actor_id
# WHERE a.actor_name= 'Tom Cruise' AND c.characters= 'Ethan Hunt';

# Commented out IPython magic to ensure Python compatibility.
# %%sql
# SELECT title, actor_name, characters FROM movies AS m
# JOIN Casts AS c ON m.movie_id=c.movie_id
# JOIN Actors AS a ON c.actor_id=a.actor_id
# WHERE a.actor_name= 'Tom Cruise' AND c.characters= 'Ethan Hunt';

"""### Number of times when the actress Cate Blanchett got nominated for an Oscar"""

# Commented out IPython magic to ensure Python compatibility.
# %%sql
# SELECT COUNT (*) FROM oscars WHERE name='Cate Blanchett';

# Commented out IPython magic to ensure Python compatibility.
# %%sql
# SELECT * FROM oscars WHERE name='Cate Blanchett'

"""### Movies that contain at least one of the official South African Languages, Afrikaans or Zulu"""

# Commented out IPython magic to ensure Python compatibility.
# %%sql
# SELECT COUNT (DISTINCT(title)) FROM movies AS m
# JOIN LanguageMap AS lm ON m.movie_id=lm.movie_id
# JOIN Languages AS l ON lm.iso_639_1=l.iso_639_1
# WHERE language_name like 'afrikaan%' OR language_name like'%zulu';

"""### Most popular movie among the ones mentioned above

"""

# Commented out IPython magic to ensure Python compatibility.
# %%sql
# SELECT DISTINCT title,popularity FROM movies AS m
# JOIN LanguageMap AS lm ON m.movie_id=lm.movie_id
# JOIN Languages AS l ON lm.iso_639_1=l.iso_639_1
# WHERE language_name like'Afrikaan%' OR language_name like'%Zulu'
# ORDER BY popularity DESC LIMIT 5
#